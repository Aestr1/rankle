
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a group
    function isGroupMember(groupId) {
      return request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberUids;
    }

    // A user's public profile can be read by any authenticated user, but only the user can modify their own data.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Rules for game groups
    match /groups/{groupId} {
      // Members can read all group data.
      allow read: if isGroupMember(groupId);
      
      // An authenticated user can create a group, as long as they list themselves as the creator and a member.
      allow create: if request.auth != null
                    && request.resource.data.creatorId == request.auth.uid
                    && request.auth.uid in request.resource.data.memberUids;
      
      // Updates are handled by server-side flows, so rules are restrictive.
      // We are not allowing direct client updates to prevent tampering.
      allow update: if false; 
      
      // Deletes are handled by server-side flows.
      allow delete: if false;
    }

    // Rules for individual gameplay scores
    match /gameplays/{gameplayId} {
      // Any authenticated user can read global scores (where groupId is null).
      // Group members can read scores belonging to their group.
      // Users can always read their own scores.
      allow read: if request.auth != null && (
                    resource.data.groupId == null ||
                    isGroupMember(resource.data.groupId) ||
                    resource.data.userId == request.auth.uid
                  );

      // A user can only create a score for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Scores cannot be changed or deleted by the client.
      allow update, delete: if false;
    }
    
    // Rules for feedback submission
    match /feedback/{feedbackId} {
      // Feedback can only be created by server-side flows.
      allow read, update, delete: if false;
      allow create: if false; // Creation is handled by the trusted server flow.
    }
  }
}
