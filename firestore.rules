
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read their own doc, and other users' public profiles.
    // Cannot write to other users' docs.
    match /users/{userId} {
      // Any authenticated user can read public user data (for friends list, leaderboards).
      allow read: if request.auth != null; 
      // Only the user can write to their own doc.
      allow write: if request.auth.uid == userId;
    }
    
    // Gameplays: Users can create their own gameplay records.
    // They can read gameplays for groups they are in or global ones.
    match /gameplays/{gameplayId} {
      // Users can only create gameplay records for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      
      // Combine read rules for clarity. A user can read a gameplay if:
      // 1. It's a global game (no groupId).
      // OR
      // 2. They are a member of the group it belongs to.
      allow read: if resource.data.groupId == null || 
                     (request.auth != null && 
                      exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                      request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberUids);
    }

    // Groups: Users can read groups they are members of.
    // Creation/Joining/Leaving/Deleting is handled by secure server-side flows.
    match /groups/{groupId} {
       // Only allow reads if the user's UID is in the group's `memberUids` array.
      allow read: if request.auth != null && 
                     'memberUids' in resource.data &&
                     request.auth.uid in resource.data.memberUids;

      // Writes are disallowed from the client for security.
      // All group mutations (create, join, leave, delete) are managed
      // by server-side Genkit flows using the Admin SDK, which bypasses these rules.
      allow write: if false; 
    }

    // Feedback: No one can read/write feedback from the client.
    // This is handled entirely by the secure server-side flow.
    match /feedback/{feedbackId} {
      allow read, write: if false;
    }
  }
}
