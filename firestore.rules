
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can be read by any authenticated user for public profile info (e.g. friends list).
    // Users can only create or update their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      // Deletes are not allowed from the client.
      allow delete: if false;
    }

    // Since group creation, joining, leaving, and deleting are all handled
    // by secure server-side flows (Genkit), client-side rules can be simpler.
    // We only need to allow members to read the group details.
    match /groups/{groupId} {
      // Any authenticated user can read a group IF they are a member.
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;
      // All mutations are handled by server-side flows, so we can deny client-side writes for safety.
      allow create, update, delete: if false;
    }

    // Rules for game scores.
    match /gameplays/{gameplayId} {
      // Users can only create gameplay scores for themselves.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Allow reading scores under three conditions:
      // 1. It's a global score (for the global leaderboard).
      // 2. It's a group score and the user is a member of that group.
      // 3. It's the user's own score (covered by the other two rules but good for clarity).
      allow read: if request.auth != null && (
        resource.data.groupId == null ||
        (resource.data.groupId != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberUids)
      );
      
      // Scores cannot be updated or deleted by clients to preserve integrity.
      allow update, delete: if false;
    }

    // Feedback can be created by any authenticated user.
    // It's submitted via a secure flow, but this rule makes the intent clear.
    // Reading/updating/deleting feedback would be an admin-only task, not for clients.
    match /feedback/{feedbackId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }
  }
}
